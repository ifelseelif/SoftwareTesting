// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class RedirectionchoosetaxiTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void redirectionchoosetaxi() {
    driver.get("https://www.booking.com");
    driver.manage().window().setSize(new Dimension(1936, 1056));
    driver.findElement(By.cssSelector(".bui-tab__item:nth-child(5) .bui-tab__text")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//input[contains(@placeholder,\'Место подачи\')]"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.xpath("//input[contains(@placeholder,\'Место назначения\')]"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector("*[data-test=\"rw-poi-finder__pickupLocation-input\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"rw-poi-finder__pickupLocation-input\"]")).sendKeys("Москва");
    WebDriverWait wait1 = new WebDriverWait(driver, 30);
    wait1.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("*[data-test=\"rw-autocomplete__link--0\"]")));
    driver.findElement(By.cssSelector("*[data-test=\"rw-autocomplete__link--0\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"rw-poi-finder__dropoffLocation-input\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"rw-poi-finder__dropoffLocation-input\"]")).sendKeys("Москва");
    WebDriverWait wait2 = new WebDriverWait(driver, 30);
    wait2.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("*[data-test=\"rw-autocomplete__link--0\"]")));
    driver.findElement(By.cssSelector("*[data-test=\"rw-autocomplete__link--0\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"button-content\"]")).click();
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("*[data-test=\"tx-transport-selector__heading\"]")));
    }
    assertThat(driver.findElement(By.cssSelector("*[data-test=\"tx-trip-summary__pickup-text\"]")).getText(), is("Домодедово аэропорт (DME), город Домодедово, Московская обл., Россия"));
    assertThat(driver.findElement(By.cssSelector("*[data-test=\"tx-trip-summary__dropoff-text\"]")).getText(), is("Московский международный деловой центр «Москва-Сити» (ММДЦ «Москва-Сити»), RU, Пресненская наб., 2, Москва, Россия, 123317"));
  }
}
